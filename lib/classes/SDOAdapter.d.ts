import { Graph } from "./Graph";
import { ErrorFunction, ParamObjSdoAdapter, Vocabulary } from "../types/types";
import { Class } from "./Class";
import { Enumeration } from "./Enumeration";
import { EnumerationMember } from "./EnumerationMember";
import { Property } from "./Property";
import { DataType } from "./DataType";
import { FilterObject } from "../types/FilterObject.type";
import { ParamObjIRIList } from "../types/ParamObjIRIList.type";
export declare class SDOAdapter {
    readonly commit?: string;
    readonly schemaHttps: boolean;
    readonly equateVocabularyProtocols: boolean;
    readonly onError: ErrorFunction;
    readonly graph: Graph;
    constructor(paramObj?: ParamObjSdoAdapter);
    addVocabularies(vocabArray: string | Vocabulary | (string | Vocabulary)[]): Promise<boolean>;
    fetchVocabularyFromURL(url: string): Promise<Vocabulary | string>;
    getTerm(id: string, filter?: FilterObject): Class | Enumeration | EnumerationMember | Property | DataType;
    getAllTerms(filter?: FilterObject): (Class | Enumeration | EnumerationMember | Property | DataType)[];
    getListOfTerms(paramObj?: ParamObjIRIList): string[];
    getClass(id: string, filter?: FilterObject): Class;
    getAllClasses(filter?: FilterObject): Class[];
    getListOfClasses(paramObj?: ParamObjIRIList): string[];
    getProperty(id: string, filter?: FilterObject): Property;
    getAllProperties(filter?: FilterObject): Property[];
    getListOfProperties(paramObj?: ParamObjIRIList): string[];
    getDataType(id: string, filter?: FilterObject): DataType;
    getAllDataTypes(filter?: FilterObject): DataType[];
    getListOfDataTypes(paramObj?: ParamObjIRIList): string[];
    getEnumeration(id: string, filter?: FilterObject): Enumeration;
    getAllEnumerations(filter?: FilterObject): Enumeration[];
    getListOfEnumerations(paramObj?: ParamObjIRIList): string[];
    getEnumerationMember(id: string, filter?: FilterObject): EnumerationMember;
    getAllEnumerationMembers(filter?: FilterObject): EnumerationMember[];
    getListOfEnumerationMembers(paramObj?: ParamObjIRIList): string[];
    getVocabularies(omitStandardVocabs?: boolean): Record<string, string>;
    getLatestSchemaVersion(): Promise<string>;
    constructURLSchemaVocabulary(version?: string): Promise<string>;
}
//# sourceMappingURL=SDOAdapter.d.ts.map